// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.28;

import {Test} from "forge-std/Test.sol";

import {IERC20} from "openzeppelin5/token/ERC20/IERC20.sol";
import {SafeERC20} from "openzeppelin5/token/ERC20/utils/SafeERC20.sol";

import {AddrLib} from "silo-foundry-utils/lib/AddrLib.sol";
import {AddrKey} from "common/addresses/AddrKey.sol";
import {LeverageUsingSiloFlashloanWithGeneralSwapDeploy} from "silo-core/deploy/LeverageUsingSiloFlashloanWithGeneralSwapDeploy.s.sol";

import {IERC20R} from "silo-core/contracts/interfaces/IERC20R.sol";
import {ISiloConfig} from "silo-core/contracts/interfaces/ISiloConfig.sol";
import {IGeneralSwapModule} from "silo-core/contracts/interfaces/IGeneralSwapModule.sol";
import {ISilo} from "silo-core/contracts/interfaces/ISilo.sol";
import {ILeverageUsingSiloFlashloan} from "silo-core/contracts/interfaces/ILeverageUsingSiloFlashloan.sol";
import {LeverageUsingSiloFlashloanWithGeneralSwap} from "silo-core/contracts/leverage/LeverageUsingSiloFlashloanWithGeneralSwap.sol";

import {SiloLittleHelper} from "../_common/SiloLittleHelper.sol";
import {SwapRouterMock} from "./mocks/SwapRouterMock.sol";

import {MintableToken} from "../_common/MintableToken.sol";
import {SiloFixture, SiloConfigOverride} from "../_common/fixtures/SiloFixture.sol";

/*
    FOUNDRY_PROFILE=core_test  forge test -vv --ffi --mc LeverageWstkscUSDTest
*/
contract LeverageWstkscUSDTest is SiloLittleHelper, Test {
    using SafeERC20 for IERC20;

    // "Silo_PT-wstkscUSD-29MAY2025_USDC.e",
    ISiloConfig siloConfig = ISiloConfig(0x3605509B2C8Bff9808da5dd5c81547d9EDC4Ffa2);
    ISilo wstkscUSDSilo = ISilo(0x8CBFF16C01154669b4DDA5B2cf8724d8ccBD3516);
    ISilo usdcSilo = ISilo(0x6030aD53d90ec2fB67F3805794dBB3Fa5FD6Eb64);

    IERC20 wstkscUSDAsset;
    IERC20 usdcAsset;

    address wstkscUSDWhale = 0x92B356D71fF33bB6384f65666c3f363CD66CBeC8;
    address usdcWhale = 0xA4E471dbfe8C95d4c44f520b19CEe436c01c3267;

    // 0x7d8A6b343f153D9d026466636ED35cA13C367fD2
    address borrower = makeAddr("borrower");

    uint256 constant _PRECISION = 1e18;

    LeverageUsingSiloFlashloanWithGeneralSwap siloLeverage;
    address collateralShareToken;
    address debtShareToken;

    function setUp() public {
        vm.createSelectFork(vm.envString("RPC_SONIC"), 29990521);

        (,collateralShareToken,) = siloConfig.getShareTokens(address(wstkscUSDSilo));
        (,, debtShareToken) = siloConfig.getShareTokens(address(usdcSilo));

        siloLeverage = _deployLeverage();
        siloLeverage.setRevenueReceiver(makeAddr("RevenueReceiver"));
        siloLeverage.setLeverageFee(0.0001e18);

        wstkscUSDAsset = IERC20(wstkscUSDSilo.asset());
        usdcAsset = IERC20(usdcSilo.asset());

        vm.prank(wstkscUSDWhale);
        wstkscUSDAsset.transfer(borrower, 50e6);

        vm.prank(usdcWhale);
        usdcAsset.transfer(borrower, 100e6);

        emit log_named_address("borrower", borrower);
        emit log_named_address("siloLeverage", address(siloLeverage));
    }

    function _deployLeverage() internal returns (LeverageUsingSiloFlashloanWithGeneralSwap) {
        AddrLib.init();
        AddrLib.setAddress(AddrKey.DAO, address(this));

        LeverageUsingSiloFlashloanWithGeneralSwapDeploy deployer = new LeverageUsingSiloFlashloanWithGeneralSwapDeploy();
        deployer.disableDeploymentsSync();
        return deployer.run();
    }

    /*
        FOUNDRY_PROFILE=core_test forge test -vv --ffi --mt test_leverage_borrowUSDC


        SILO: Silo_PT-wstkscUSD-29MAY2025_USDC.e.json
        "token0": "PT-wstkscUSD-29MAY2025",
                "PT-wstkscUSD-29MAY2025": "0xBe27993204Ec64238F71A527B4c4D5F4949034C3",

        "token1": "USDC.e",
            "USDC.e": "0x29219dd400f2Bf60E5a23d13Be72B486D4038894",
    */
    function test_leverage_borrowUSDC() public {
        _openLeverageOnBorrowUSDC();

        vm.warp(block.timestamp + 1 hours);

        _closeLeverageOnBorrowUSDC();
    }

    function _openLeverageOnBorrowUSDC() internal {
        uint256 depositAmount = 1e6;

        assertGt(wstkscUSDAsset.balanceOf(borrower), depositAmount, "borrower needs deposit token");

        // flashloan USDC

        ILeverageUsingSiloFlashloan.FlashArgs memory flashArgs = ILeverageUsingSiloFlashloan.FlashArgs({
            amount: 1.1e6,
            flashloanTarget: address(usdcSilo)
        });

        // swap USDC -> PT

        /* this data should be provided by BE API
         NOTICE: user needs to give allowance for swap router to use tokens

        Pendle SWAP API
        https://api-v2.pendle.finance/core/docs#/SDK/SdkController_swap
        - receiver: must be leverage contract
        */

        IGeneralSwapModule.SwapArgs memory swapArgs = IGeneralSwapModule.SwapArgs({
            sellToken: address(usdcAsset),
            buyToken: address(wstkscUSDAsset),
            // API output field: $.tx.to
            allowanceTarget: address(0x888888888889758F76e7103c6CbF23ABbF58F946),
            // API output field: $.tx.to
            exchangeProxy: address(0x888888888889758F76e7103c6CbF23ABbF58F946),
            // API output field: $.tx.data
            swapCallData: abi.encodePacked(
                hex"c81f847a000000000000000000000000",
                address(siloLeverage.SWAP_MODULE()),
                hex"0000000000000000000000006e4e95fab7db1f0524b4b0a05f0b9c96380b7dfa00000000000000000000000000000000000000000000000000000000000ffc1e00000000000000000000000000000000000000000000000000000000000869bf000000000000000000000000000000000000000000000000000000000015085d000000000000000000000000000000000000000000000000000000000010d37e000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000052f5fe83495f00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000ca000000000000000000000000029219dd400f2bf60e5a23d13be72b486d4038894000000000000000000000000000000000000000000000000000000000010c8e00000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e494206000000000000000000000000d4e9b0d466789d7f6201442eeccba6a75a552db000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a04e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000007400000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000029219dd400f2bf60e5a23d13be72b486d40388940000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e494206000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000dfcdad314b0b96ab8890391e3f0540278e3b80f700000000000000000000000029219dd400f2bf60e5a23d13be72b486d4038894000000000000000000000000d3dce716f3ef535c5ff8d041c1a41c3bd89b97ae000000000000000000000000000000000000000000000000000000000010c8e0000000000000000000000000000000000000000019ba732a1c8e5c88b0eab6d10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000081eb3d2ad4f44a059974a1df7bde9839bdb9e093000000000000000000000000d3dce716f3ef535c5ff8d041c1a41c3bd89b97ae0000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e494206000000000000000000000000000000000000000000000000000000000010ce39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000010000000000000000000000000010ba6500000000000000000000000029219dd400f2bf60e5a23d13be72b486d40388940000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e494206000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000000010c8e000000000000000000000000000000000000000000000000000000000000fe4460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000010c8e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027a7b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22312e31303431383031323130363835393639222c22416d6f756e744f7574555344223a22312e31303230313036353232333338303432222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231303936323933222c2254696d657374616d70223a313734383336363832372c22526f7574654944223a2236613962396438302d613735342d343931332d393763312d3463343232646666393766363a64346665653834392d653464612d343731392d613865382d643533333833353264646137222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22637a34454952554562496b5a5a4d5259646b66395a2f4e6a336c32652b4d33693838696f6d69596a6e7846643148664b3247632f627a71444676737863614138346161737a48484f466c61765939662f6f56746b51353549646446496f59444359487a5664364356784f68797456783261704c7639706b445a694d58344e453864777548434d647031556d73734d6b47584a766d414a55325744396a3469712b7230426d616254344e45377a4470445171327348387577464a446e372f7a363965446d396e496b7858593834614a643643787336386b475664354277627555592f675264725830396845372b70635a4234732f57395a4b3737594734687342673575336330656b624259496431583834563466327042764e6b4e69724b70697442387869304d33617242764f4e706a53646a376357397a6a764363756756507158614364582b2f6e4d4b554c454676323255324e4e413d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            )
        });

        // deposit PT
        ILeverageUsingSiloFlashloan.DepositArgs memory depositArgs = ILeverageUsingSiloFlashloan.DepositArgs({
            amount: depositAmount,
            collateralType: ISilo.CollateralType.Collateral,
            silo: wstkscUSDSilo
        });

        // repay flashloan will be done by borrow USDC

        // approvals

        vm.startPrank(borrower);
        // siloLeverage needs approval to pull user tokens to do deposit in behalf of user
        wstkscUSDAsset.forceApprove(address(siloLeverage), depositArgs.amount);

        uint256 debtReceiveApproval = _calculateDebtReceiveApproval(
            flashArgs.amount, ISilo(flashArgs.flashloanTarget)
        );

        // user must set approvals for debt share token
        IERC20(debtShareToken).forceApprove(address(siloLeverage), debtReceiveApproval);
        // receiveAllowance will be needed for newest Silos

        // OPEN

        _displayBorrowerState();

        siloLeverage.openLeveragePosition(flashArgs, abi.encode(swapArgs), depositArgs);
        vm.stopPrank();

        _displayBorrowerState();
    }

    function _closeLeverageOnBorrowUSDC() internal {
        // flashloan USDC so we can repay debt

        // calculate (this is arbitrary math) amount of PT token (collateral) to swap for USDC, to repay flashloan

        /* this data should be provided by BE API
         NOTICE: user needs to give allowance for swap router to use tokens

        Pendle SWAP API
        https://api-v2.pendle.finance/core/docs#/SDK/SdkController_swap
        - receiver: must be leverage contract
        */

        IGeneralSwapModule.SwapArgs memory swapArgs = IGeneralSwapModule.SwapArgs({
            sellToken: address(wstkscUSDAsset),
            buyToken: address(usdcAsset),
            // API output field: $.tx.to
            allowanceTarget: address(0x888888888889758F76e7103c6CbF23ABbF58F946),
            // API output field: $.tx.to
            exchangeProxy: address(0x888888888889758F76e7103c6CbF23ABbF58F946),
            // API output field: $.tx.data
            // tokenInAmount: 1.5
            swapCallData: abi.encodePacked(
                hex"594a88cc000000000000000000000000",
                address(siloLeverage.SWAP_MODULE()),
                hex"0000000000000000000000006e4e95fab7db1f0524b4b0a05f0b9c96380b7dfa000000000000000000000000000000000000000000000000000000000016e36000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000029219dd400f2bf60e5a23d13be72b486d4038894000000000000000000000000000000000000000000000000000000000015aecc0000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e494206000000000000000000000000d4e9b0d466789d7f6201442eeccba6a75a552db000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000a04e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000007400000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e49420600000000000000000000000029219dd400f2bf60e5a23d13be72b486d4038894000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec600000000000000000000000081eb3d2ad4f44a059974a1df7bde9839bdb9e0930000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e494206000000000000000000000000d3dce716f3ef535c5ff8d041c1a41c3bd89b97ae00000000000000000000000000000000000000000000000000000000001735c100000000000000000000000000000000000000000000000000000001000276a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000dfcdad314b0b96ab8890391e3f0540278e3b80f7000000000000000000000000d3dce716f3ef535c5ff8d041c1a41c3bd89b97ae00000000000000000000000029219dd400f2bf60e5a23d13be72b486d4038894000000000000000000000000000000000000000000000000000000000017505a0000000000000000000000000000000000000003298b01831f394021585491410000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000001000000000000000000000000001747ce0000000000000000000000009fb76f7ce5fceaa2c42887ff441d46095e49420600000000000000000000000029219dd400f2bf60e5a23d13be72b486d4038894000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000000000000000001735c10000000000000000000000000000000000000000000000000000000000161dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006e4141d33021b52c91c28608403db4a0ffb50ec6000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001735c100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002797b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22312e353233303437393536333434353539222c22416d6f756e744f7574555344223a22312e35323634383535373234313934343032222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231353235373130222c2254696d657374616d70223a313734383337333635372c22526f7574654944223a2263376231333437632d363766632d346538392d623566632d3532383930373265303432653a33323962616565622d326139652d343763622d616635322d643661633237353831373737222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2256734b3879347366644763333571416b4352746c637a47456647597231694558304c5a6e385878797874424933304558497230306448434f313668716a56742b7953397579395269544939464847696b633244665a3039473075433145397233413444424970576d424b6f576f6c47596334364a69334139726c6f6a3136707639706470724344476e412b566b426d61474638723767326e79626a3972756c6e64534963324e5269575a4768772f317636664132696e456374327a717362572f32496d66577647752f3069533651636e6b423253696e5a6d454951487844533947726671333031682f67756b4c6f3946354b736a4f737832434e4d6b5767424d544667332b423372364965456b445749375545785a473337555151526d47544475386d6e35505069566e613669315647484553494e5777502f6b5142525a487973537253615032456e75414252782b306a4b734247413d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            )
        });

        ILeverageUsingSiloFlashloan.CloseLeverageArgs memory closeArgs = ILeverageUsingSiloFlashloan.CloseLeverageArgs({
            flashloanTarget: address(usdcSilo),
            siloWithCollateral: wstkscUSDSilo,
            collateralType: ISilo.CollateralType.Collateral
        });

        // approvals

        vm.startPrank(borrower);

        // approva all collateral
        uint256 collateralSharesApproval = IERC20(collateralShareToken).balanceOf(borrower);
        IERC20(collateralShareToken).forceApprove(address(siloLeverage), collateralSharesApproval);

        // CLOSE

        _displayBorrowerState();

        siloLeverage.closeLeveragePosition(abi.encode(swapArgs), closeArgs);
        vm.stopPrank();

        _displayBorrowerState();
    }

    function _calculateDebtReceiveApproval(
        uint256 _flashAmount,
        ISilo _flashFrom
    ) internal view returns (uint256 debtReceiveApproval) {
        uint256 borrowAssets = _flashAmount + _flashFrom.flashFee(_flashFrom.asset(), _flashAmount);
        debtReceiveApproval = _flashFrom.convertToShares(borrowAssets, ISilo.AssetType.Debt);
    }

    function _displayBorrowerState() internal {
        emit log("____________");

        uint256 shares = wstkscUSDSilo.balanceOf(borrower);

        emit log_named_decimal_uint("PT balance", wstkscUSDAsset.balanceOf(borrower), 6);
        emit log_named_decimal_uint("USDC balance", usdcAsset.balanceOf(borrower), 6);

        emit log_named_decimal_uint("COLLATERAL", wstkscUSDSilo.previewRedeem(shares), 6);
        emit log_named_decimal_uint("DEBT SHARES", IERC20(debtShareToken).balanceOf(borrower), 6);
        emit log_named_decimal_uint("MAX DEBT", usdcSilo.maxRepay(borrower), 6);

        uint256 debtAllowance = IERC20(debtShareToken).allowance(borrower, address(siloLeverage));
        uint256 debtReceiveAllowance = IERC20R(debtShareToken).receiveAllowance(borrower,address(siloLeverage));

        emit log_named_decimal_uint("DEBT allowance", debtAllowance, 6);
        emit log_named_decimal_uint("DEBT receiveAllowance", debtReceiveAllowance, 6);
    }
}
